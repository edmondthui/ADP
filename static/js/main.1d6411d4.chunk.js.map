{"version":3,"sources":["utils/kanban.utils.js","components/card/card.component.jsx","components/card-column/card-column.component.jsx","components/create-card/create-card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["connectToKanbanDB","a","KanbanDB","connect","db","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","width","height","boxShadow","display","flexDirection","justifyContent","alignItems","Card","card","index","updateCards","useState","modalIsOpen","setIsOpen","cardId","setCardId","name","cardName","setCardName","description","cardDescription","setCardDescription","openModal","e","console","log","currentTarget","id","closeModal","isOpen","onAfterOpen","onRequestClose","style","contentLabel","onSubmit","preventDefault","cardData","status","then","dbInstanceId","updateCardById","className","htmlFor","value","onChange","maxLength","onClick","deleteCardById","bool","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","draggableStyle","CardColumn","this","props","cards","droppableId","droppableProps","map","key","placeholder","Component","CreateCard","create","setCreateField","setStatus","addCard","disabled","length","App","getCards","todos","slice","filter","inProgress","done","setState","TODO","IN_PROGRESS","DONE","catch","err","message","onDragEnd","result","destination","source","column","newCards","Array","from","state","splice","destinationCards","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1d6411d4.chunk.js","sourcesContent":["import KanbanDB from \"kanbandb\";\n\n\nexport const connectToKanbanDB = async () => {\n    const db = await KanbanDB.connect(\"testDB\");\n    return db\n}","import React, { useState, Fragment } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./card.styles.css\";\nimport Modal from \"react-modal\";\nimport { connectToKanbanDB } from \"../../utils/kanban.utils.js\";\n\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n    content: {\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n        width: \"50%\",\n        height: \"50%\",\n        boxShadow: \"0px 2px 5px 5px rgba(0, 0, 0, 0.1)\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n};\n\nconst Card = ({ card, index, updateCards }) => {\n    const [modalIsOpen, setIsOpen] = useState(false);\n    const [cardId, setCardId] = useState(\"\");\n    const [cardName, setCardName] = useState(card.name);\n    const [cardDescription, setCardDescription] = useState(card.description);\n\n    const getCardStyle = (isDragging, draggableStyle) => {\n        if (isDragging && draggableStyle.transform !== null) draggableStyle.transform += \" rotate(10deg)\";\n        return { ...draggableStyle };\n    };\n\n    const openModal = (e) => {\n        setIsOpen(true);\n        console.log(e.currentTarget.id);\n        setCardId(e.currentTarget.id);\n    };\n\n    const afterOpenModal = () => {};\n\n    const closeModal = () => {\n        setIsOpen(false);\n    };\n\n    const handleDelete = () => {\n        connectToKanbanDB().then((db, dbInstanceId) => {\n            db.deleteCardById(cardId).then((bool) => console.log(`successfully deleted card ${bool}`));\n\n            setCardId(\"\");\n            updateCards();\n            closeModal();\n        });\n    };\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        const cardData = { name: cardName, description: cardDescription, status: card.status };\n        connectToKanbanDB().then((db, dbInstanceId) => {\n            db.updateCardById(cardId, cardData);\n            updateCards();\n            closeModal();\n        })\n    }\n\n    const onCardNameChange = (e) => {\n        setCardName(e.currentTarget.value);\n    }\n\n    const onCardDescriptionChange = (e) => {\n        setCardDescription(e.currentTarget.value);\n    };\n\n    return (\n        <Fragment>\n            <Modal isOpen={modalIsOpen} onAfterOpen={afterOpenModal} onRequestClose={closeModal} style={customStyles} contentLabel=\"Delete Card Modal\">\n                <form onSubmit={handleUpdate} className=\"modal-form\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input name=\"name\" value={cardName} onChange={onCardNameChange} maxLength={500}/>\n                    <label htmlFor=\"description\">Description</label>\n                    <input name=\"description\" value={cardDescription} onChange={onCardDescriptionChange} maxLength={500}/>\n                    <button className=\"update-card\">\n                            UPDATE CARD\n                    </button>\n                </form>    \n                <button className=\"delete-card\" onClick={handleDelete}>\n                    DELETE CARD\n                </button>\n            </Modal>\n            <Draggable draggableId={card.id} index={index}>\n                {(provided, snapshot) => (\n                    <div\n                        onClick={openModal}\n                        className=\"card\"\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        id={card.id}\n                        style={getCardStyle(snapshot.isDragging, provided.draggableProps.style)}\n                    >\n                        {card.description}\n                    </div>\n                )}\n            </Draggable>\n        </Fragment>\n    );\n};\n\n// class Card extends Component {\n//     render() {\n//         const { card, index } = this.props;\n//         return (\n//             <Draggable draggableId={card.id} index={index} key={card.id}>\n//                 {(provided) => (\n//                     <div className=\"card\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n//                         {card.description}\n//                     </div>\n//                 )}\n//             </Draggable>\n//         );\n//     }\n// }\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./card-column.styles.css\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Card from \"../card/card.component\";\n\nclass CardColumn extends Component {\n\n    render() {\n        const { cards, status, updateCards } = this.props;\n\n        return (         \n            <Droppable droppableId={status}>\n                {(provided) => (\n                    <div ref={provided.innerRef} className=\"card-column\" {...provided.droppableProps}>\n                        {cards.map((card, index) => {\n                            return <Card updateCards={updateCards} card={card} index={index} key={card.id} />;\n                        })}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        );\n    }\n}\n\nexport default CardColumn;\n","import React, { useState } from \"react\";\nimport \"./create-card.styles.css\";\nimport { connectToKanbanDB } from \"../../utils/kanban.utils.js\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\nconst customStyles = {\n    content: {\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n        width: \"50%\",\n        height: \"25%\",\n        boxShadow: \"0px 2px 5px 5px rgba(0, 0, 0, 0.1)\",\n    },\n};\n\nconst CreateCard = ({ updateCards }) => {\n    const [modalIsOpen, setIsOpen] = useState(false);\n    const [create, setCreateField] = useState(\"\");\n    const [status, setStatus] = useState(\"\");\n\n    const onStringChange = (field) => {\n        return (e) => {\n            setCreateField(e.currentTarget.value);\n        };\n    };\n\n    function openModal(e) {\n        e.preventDefault();\n        if (create.length) {\n            setIsOpen(true);\n        }\n    }\n\n    function afterOpenModal() {}\n\n    function closeModal() {\n        setIsOpen(false);\n    }\n\n    const statusHandler = (e) => {\n        setStatus(e.currentTarget.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (status) {\n            let card = { name: create, description: create, status: status };\n            connectToKanbanDB().then((db, dbInstanceId) => {\n                db.addCard(card).then((cardId) => console.log(`successfully added card ${cardId}`));\n            });\n            setCreateField(\"\");\n            setStatus(\"\");\n            updateCards();\n            closeModal();\n        }\n    };\n\n    return (\n        <div className=\"create-card\">\n            <Modal isOpen={modalIsOpen} onAfterOpen={afterOpenModal} onRequestClose={closeModal} style={customStyles} contentLabel=\"Create Card Modal\">\n                <form onSubmit={handleSubmit} className=\"modal-form\">\n                    <select onChange={statusHandler} value={status}>\n                        <option value=\"\" disabled>\n                            SELECT STATUS\n                        </option>\n                        <option value=\"TODO\">To-do</option>\n                        <option value=\"IN_PROGRESS\">In Progress</option>\n                        <option value=\"DONE\">Done</option>\n                    </select>\n                    <button>CREATE CARD</button>\n                </form>\n            </Modal>\n            <form onSubmit={openModal} className=\"create-card-form\">\n                <input onChange={onStringChange(\"create\")} value={create} placeholder=\"e.g. Bug: TextPoll not dispatching half stars\" maxLength={500} />\n                <button>ADD NEW</button>\n            </form>\n        </div>\n    );\n};\n\nexport default CreateCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardColumn from \"./components/card-column/card-column.component.jsx\";\nimport CreateCard from \"./components/create-card/create-card.component.jsx\";\nimport { connectToKanbanDB } from \"./utils/kanban.utils\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nclass App extends Component {\n    // Initialize DB communications.\n\n    constructor() {\n        super();\n        this.state = {\n            TODO: [],\n\t\t\tIN_PROGRESS: [],\n\t\t\tDONE: []\n        };\n\n        this.updateCards = this.updateCards.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateCards();\n    }\n\n    updateCards = async () => {\n        connectToKanbanDB().then((db, dbInstanceId) => {\n            db.getCards().then(cards => {\n                const todos = cards.slice().filter(card => card.status === \"TODO\");\n                const inProgress = cards.slice().filter(card => card.status === \"IN_PROGRESS\");\n                const done = cards.slice().filter(card => card.status === \"DONE\");\n                this.setState(() => {\n                    return {\n                        TODO: todos,\n                        IN_PROGRESS: inProgress,\n                        DONE: done\n                    }\n                })\n            }).catch(err => {\n                if (err.message === \"No data found.\") {\n                    this.setState(() => {\n                        return {\n                            TODO: [],\n                            IN_PROGRESS: [],\n                            DONE: []\n                        }\n                    })\n                }\n            })\n        });\n    };\n\n    onDragEnd = (result) => {\n        const { destination, source } = result;\n        if (!destination) {\n            return;\n        }\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n\t\tconst column = source.droppableId;\n        const newCards = Array.from(this.state[column]);\n\t\t\n\t\tif (destination.droppableId === source.droppableId) {\n\t\t\tconst card = newCards.splice(source.index, 1);\n\t\t\t// Database does not keep track of index so it just updates this on the front end\n\t\t\tnewCards.splice(destination.index, 0, ...card);\n\t\t\tthis.setState(() => {\n\t\t\t\treturn { [destination.droppableId] : newCards}\n\t\t\t})\n\t\t}\n\n\t\tif (destination.droppableId !== source.droppableId) {\n\t\t\tconst card = newCards[source.index];\n\t\t\tcard.status = destination.droppableId;\n\t\t\tnewCards.splice(source.index, 1);\n\t\t\tconst destinationCards = Array.from(this.state[destination.droppableId]);\n\t\t\tdestinationCards.splice(destination.index, 0, card);\n\t\t\tthis.setState(() => {\n\t\t\t\treturn { \n\t\t\t\t\t[destination.droppableId]: destinationCards,\n\t\t\t\t\t[source.droppableId]: newCards\n\t\t\t\t};\n\t\t\t})\n\t\t\tconnectToKanbanDB().then((db, dbInstanceId) => {\n\t\t\t\tdb.updateCardById(card.id, {status: destination.droppableId})\n\t\t\t})\n\t\t}\n    };\n\n    render() {\n        const { TODO, IN_PROGRESS, DONE } = this.state;\n        return (\n            <div className=\"App\">\n                <div className=\"columns-container\">\n                    <DragDropContext onDragEnd={this.onDragEnd}>\n                        <div className=\"column-container\">\n                            <h1 className=\"column-title\">To-do</h1>\n                            <CardColumn cards={TODO} status=\"TODO\" updateCards={this.updateCards} />\n                        </div>\n                        <div className=\"column-container\">\n                            <h1 className=\"column-title\">In Progress</h1>\n                            <CardColumn cards={IN_PROGRESS} status=\"IN_PROGRESS\" updateCards={this.updateCards} />\n                        </div>\n                        <div className=\"column-container\">\n                            <h1 className=\"column-title\">Done</h1>\n                            <CardColumn cards={DONE} status=\"DONE\" updateCards={this.updateCards} />\n                        </div>\n                        <CreateCard updateCards={this.updateCards} />\n                    </DragDropContext>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}