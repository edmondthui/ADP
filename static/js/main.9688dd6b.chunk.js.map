{"version":3,"sources":["components/card/card.component.jsx","components/card-column/card-column.component.jsx","utils/kanban.utils.js","components/create-card/create-card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","card","index","draggableId","id","provided","snapshot","className","draggableProps","dragHandleProps","ref","innerRef","style","isDragging","draggableStyle","transform","description","CardColumn","this","props","cards","status","droppableId","droppableProps","map","key","placeholder","Component","connectToKanbanDB","a","KanbanDB","connect","db","CreateCard","handleSubmit","e","preventDefault","state","create","length","name","then","dbInstanceId","addCard","cardId","console","log","getCards","setState","updateCards","update","bind","field","currentTarget","value","onSubmit","onChange","App","getCardsByStatusCodes","TODO","IN_PROGRESS","DONE","onDragEnd","result","destination","source","column","newCards","Array","from","splice","destinationCards","updateCardById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9688dd6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./card.styles.css\";\n\nconst Card = ({ card, index }) => {\n\n    const getCardStyle = (isDragging, draggableStyle) => {\n        if (isDragging && draggableStyle.transform !== null) draggableStyle.transform += \" rotate(10deg)\";\n        return ({...draggableStyle})\n    }\n\n    return (\n        <Draggable draggableId={card.id} index={index}>\n            {(provided, snapshot) => (\n                <div\n                    className=\"card\"\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    style={getCardStyle(snapshot.isDragging, provided.draggableProps.style)}\n                    >\n                    {card.description}\n                </div>\n            )}\n        </Draggable>\n    );\n};\n\n// class Card extends Component {\n//     render() {\n//         const { card, index } = this.props;\n//         return (\n//             <Draggable draggableId={card.id} index={index} key={card.id}>\n//                 {(provided) => (\n//                     <div className=\"card\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n//                         {card.description}\n//                     </div>\n//                 )}\n//             </Draggable>\n//         );\n//     }\n// }\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./card-column.styles.css\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Card from \"../card/card.component\";\n\nclass CardColumn extends Component {\n\n    render() {\n        const { cards, status } = this.props;\n        return (         \n            <Droppable droppableId={status}>\n                {(provided) => (\n                    <div ref={provided.innerRef} className=\"card-column\" {...provided.droppableProps}>\n                        {cards.map((card, index) => {\n                            return <Card card={card} index={index} key={card.id} />;\n                        })}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        );\n    }\n}\n\nexport default CardColumn;\n","import KanbanDB from \"kanbandb\";\n\n\nexport const connectToKanbanDB = async () => {\n    const db = await KanbanDB.connect(\"testDB\");\n    return db\n}","import React, { Component } from \"react\";\nimport \"./create-card.styles.css\";\nimport {connectToKanbanDB} from \"../../utils/kanban.utils.js\"\n\n\nclass CreateCard extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            create: ''\n        }\n        this.update = this.update.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    update(field) {\n        return (e) => {\n            this.setState({ [field]: e.currentTarget.value });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.create.length) {\n            let card = {name: this.state.create, description: this.state.create, status: \"TODO\"}\n            connectToKanbanDB().then((db, dbInstanceId) => {\n                db.addCard(card).then((cardId) => console.log(`successfully added card ${cardId}`));\n                db.getCards().then((cards) => console.log(cards));\n            });\n            this.setState({create : ''});\n            this.props.updateCards();\n        }\n    };\n\n    render() {\n        const { handleSubmit, update} = this;\n        return (\n            <div className=\"create-card\">\n                <form onSubmit={handleSubmit} className=\"create-card-form\">\n                    <input onChange = {update(\"create\")} value={this.state.create} placeholder=\"e.g. Bug: TextPoll not dispatching half stars\" />\n                    <button>ADD NEW</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default CreateCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardColumn from \"./components/card-column/card-column.component.jsx\";\nimport CreateCard from \"./components/create-card/create-card.component.jsx\";\nimport { connectToKanbanDB } from \"./utils/kanban.utils\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nclass App extends Component {\n    // Initialize DB communications.\n\n    constructor() {\n        super();\n        this.state = {\n            TODO: [],\n\t\t\tIN_PROGRESS: [],\n\t\t\tDONE: []\n        };\n\n        this.updateCards = this.updateCards.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateCards();\n    }\n\n    updateCards = async () => {\n        connectToKanbanDB().then((db, dbInstanceId) => {\n\t\t\tdb.getCardsByStatusCodes(['TODO']).then(cards => {\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { TODO: cards };\n\t\t\t\t})\n\t\t\t})\n\t\t\tdb.getCardsByStatusCodes([\"IN_PROGRESS\"]).then((cards) => {\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { IN_PROGRESS: cards };\n\t\t\t\t});\n\t\t\t});\n\t\t\tdb.getCardsByStatusCodes([\"DONE\"]).then((cards) => {\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { DONE: cards };\n\t\t\t\t});\n\t\t\t});\n        });\n    };\n\n    onDragEnd = (result) => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n            return;\n        }\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n\t\tconst column = source.droppableId;\n        const newCards = Array.from(this.state[column]);\n\t\t\n\t\tif (destination.droppableId === source.droppableId) {\n\t\t\tconst card = newCards.splice(source.index, 1);\n\t\t\t// Database does not keep track of index so it just updates this on the front end\n\t\t\tnewCards.splice(destination.index, 0, ...card);\n\t\t\tthis.setState(() => {\n\t\t\t\treturn { [destination.droppableId] : newCards}\n\t\t\t})\n\t\t}\n\n\t\tif (destination.droppableId !== source.droppableId) {\n\t\t\tconst card = newCards[source.index];\n\t\t\tcard.status = destination.droppableId;\n\t\t\tnewCards.splice(source.index, 1);\n\t\t\tconst destinationCards = Array.from(this.state[destination.droppableId]);\n\t\t\tdestinationCards.splice(destination.index, 0, card);\n\t\t\tthis.setState(() => {\n\t\t\t\treturn { \n\t\t\t\t\t[destination.droppableId]: destinationCards,\n\t\t\t\t\t[source.droppableId]: newCards\n\t\t\t\t};\n\t\t\t})\n\t\t\tconnectToKanbanDB().then((db, dbInstanceId) => {\n\t\t\t\tdb.updateCardById(card.id, {status: destination.droppableId})\n\t\t\t})\n\t\t}\n    };\n\n    render() {\n        const { TODO, IN_PROGRESS, DONE } = this.state;\n        return (\n            <div className=\"App\">\n                <div className=\"columns-container\">\n                    <DragDropContext onDragEnd={this.onDragEnd}>\n                        <div className=\"column-container\">\n                            <h1 className=\"column-title\">To-do</h1>\n                            <CardColumn cards={TODO} status=\"TODO\" />\n                        </div>\n                        <div className=\"column-container\">\n                            <h1 className=\"column-title\">In Progress</h1>\n                            <CardColumn cards={IN_PROGRESS} status=\"IN_PROGRESS\" />\n                        </div>\n                        <div className=\"column-container\">\n                            <h1 className=\"column-title\">Done</h1>\n                            <CardColumn cards={DONE} status=\"DONE\" />\n                        </div>\n                        <CreateCard updateCards={this.updateCards} />\n                    </DragDropContext>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}