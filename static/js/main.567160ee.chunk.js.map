{"version":3,"sources":["components/card/card.component.jsx","components/card-column/card-column.component.jsx","utils/kanban.utils.js","components/create-card/create-card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","card","index","draggableId","id","key","provided","className","ref","innerRef","draggableProps","dragHandleProps","description","CardColumn","this","props","cards","status","console","log","droppableId","droppableProps","map","placeholder","Component","connectToKanbanDB","a","KanbanDB","connect","db","CreateCard","handleSubmit","e","currentTarget","state","preventDefault","name","create","then","dbInstanceId","addCard","cardId","getCards","setState","updateCards","update","bind","field","value","onSubmit","onChange","App","getCardsByStatusCodes","TODO","IN_PROGRESS","DONE","onDragEnd","result","destination","source","column","newCards","Array","from","splice","destinationCards","updateCardById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.567160ee.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./card.styles.css\";\n\nconst Card = ({ card, index }) => {\n    return (\n        <Draggable draggableId={card.id} index={index} key={card.id}>\n            {(provided) => (\n                <div className=\"card\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                    {card.description}\n                </div>\n            )}\n        </Draggable>\n    );\n};\n\n// class Card extends Component {\n//     render() {\n//         const { card, index } = this.props;\n//         return (\n//             <Draggable draggableId={card.id} index={index} key={card.id}>\n//                 {(provided) => (\n//                     <div className=\"card\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n//                         {card.description}\n//                     </div>\n//                 )}\n//             </Draggable>\n//         );\n//     }\n// }\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./card-column.styles.css\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Card from \"../card/card.component\";\n\nclass CardColumn extends Component {\n\n    render() {\n        const { cards, status } = this.props;\n        console.log(\"render\")\n        return (         \n            <Droppable droppableId={status}>\n                {(provided) => (\n                    <div ref={provided.innerRef} className=\"card-column\" {...provided.droppableProps}>\n                        {cards.map((card, index) => {\n                            return <Card card={card} index={index} />;\n                        })}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        );\n    }\n}\n\nexport default CardColumn;\n","import KanbanDB from \"kanbandb\";\n\n\nexport const connectToKanbanDB = async () => {\n    const db = await KanbanDB.connect(\"testDB\");\n    return db\n}","import React, { Component } from \"react\";\nimport \"./create-card.styles.css\";\nimport {connectToKanbanDB} from \"../../utils/kanban.utils.js\"\n\n\nclass CreateCard extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            create: ''\n        }\n        this.update = this.update.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    update(field) {\n        return (e) => {\n            this.setState({ [field]: e.currentTarget.value });\n        }\n    }\n\n    handleSubmit = (e) => {\n        console.log(e)\n        console.log(e.currentTarget)\n        console.log(this.state);\n        console.log(this.props);\n        e.preventDefault();\n        let card = {name: this.state.create, description: this.state.create, status: \"TODO\"}\n        connectToKanbanDB().then((db, dbInstanceId) => {\n            console.log(dbInstanceId);\n            db.addCard(card).then((cardId) => console.log(`successfully added card ${cardId}`));\n            db.getCards().then((cards) => console.log(cards));\n        });\n        this.setState({create : ''});\n        this.props.updateCards();\n    };\n\n    render() {\n        const { handleSubmit, update} = this;\n        return (\n            <div className=\"create-card\">\n                <form onSubmit={handleSubmit} className=\"create-card-form\">\n                    <input onChange = {update(\"create\")} value={this.state.create} placeholder=\"e.g. Bug: TextPoll not dispatching half stars\" />\n                    <button>ADD NEW</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default CreateCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardColumn from \"./components/card-column/card-column.component.jsx\";\nimport CreateCard from \"./components/create-card/create-card.component.jsx\";\nimport { connectToKanbanDB } from \"./utils/kanban.utils\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nclass App extends Component {\n    // Initialize DB communications.\n\n    constructor() {\n        super();\n        this.state = {\n            TODO: [],\n\t\t\tIN_PROGRESS: [],\n\t\t\tDONE: []\n        };\n\n        this.updateCards = this.updateCards.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateCards();\n    }\n\n    updateCards = async () => {\n        connectToKanbanDB().then((db, dbInstanceId) => {\n\t\t\tdb.getCardsByStatusCodes(['TODO']).then(cards => {\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { TODO: cards };\n\t\t\t\t})\n\t\t\t})\n\t\t\tdb.getCardsByStatusCodes([\"IN_PROGRESS\"]).then((cards) => {\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { IN_PROGRESS: cards };\n\t\t\t\t});\n\t\t\t});\n\t\t\tdb.getCardsByStatusCodes([\"DONE\"]).then((cards) => {\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { DONE: cards };\n\t\t\t\t});\n\t\t\t});\n        });\n    };\n\n    onDragEnd = (result) => {\n        const { destination, source, draggableId } = result;\n        console.log(result);\n\n        if (!destination) {\n            return;\n        }\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n\t\tconst column = source.droppableId;\n        const newCards = Array.from(this.state[column]);\n\t\t\n\t\tif (destination.droppableId === source.droppableId) {\n\t\t\tconst card = newCards.splice(source.index, 1);\n\t\t\t// Database does not keep track of index so it just updates this on the front end\n\t\t\tnewCards.splice(destination.index, 0, ...card);\n\t\t\tthis.setState(() => {\n\t\t\t\treturn { [destination.droppableId] : newCards}\n\t\t\t})\n\t\t}\n\n\t\tif (destination.droppableId !== source.droppableId) {\n\t\t\tconst card = newCards[source.index];\n\t\t\tcard.status = destination.droppableId;\n\t\t\tnewCards.splice(source.index, 1);\n\t\t\tconst destinationCards = Array.from(this.state[destination.droppableId]);\n\t\t\tdestinationCards.splice(destination.index, 0, card);\n\t\t\tconsole.log(destinationCards);\n\t\t\tthis.setState(() => {\n\t\t\t\treturn { \n\t\t\t\t\t[destination.droppableId]: destinationCards,\n\t\t\t\t\t[source.droppableId]: newCards\n\t\t\t\t};\n\t\t\t})\n\t\t\tconnectToKanbanDB().then((db, dbInstanceId) => {\n\t\t\t\tdb.updateCardById(card.id, {status: destination.droppableId})\n\t\t\t})\n\t\t}\n    };\n\n    render() {\n        const { TODO, IN_PROGRESS, DONE } = this.state;\n        return (\n            <div className=\"App\">\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <div className=\"column-container\">\n                        <h1 className=\"column-title\">To-do</h1>\n                        <CardColumn cards={TODO} status=\"TODO\" />\n                    </div>\n                    <div className=\"column-container\">\n                        <h1 className=\"column-title\">In Progress</h1>\n                        <CardColumn cards={IN_PROGRESS} status=\"IN_PROGRESS\" />\n                    </div>\n                    <div className=\"column-container\">\n                        <h1 className=\"column-title\">Done</h1>\n                        <CardColumn cards={DONE} status=\"DONE\" />\n                    </div>\n                    <CreateCard updateCards={this.updateCards} />\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}